<template>
	<list-view ref="listView" :id="id" class="list" :rebound="false" :scroll-y="true" :custom-nested-scroll="true" @scrolltolower="loadData(null)">
		<!-- 骨架屏 -->
		<list-item v-if="isFirstLoad" :type="1">
			<skeleton></skeleton>
		</list-item>
		<!-- 空数据显示 -->
		<list-item v-if="!isFirstLoad && count == 0" :type="2" class="flex-1">
			<tip v-if="page == 'user-space' && isAdmin && type == 'article'" title="现在不发帖,光看别人火" button="去发帖" @click-button="openAddPost"/>
			<tip v-else/>
		</list-item>
		
		<!-- 帖子列表 -->
		<template v-if="type == 'article' || page == 'index'">
			<list-item v-for="(item,index) in dataList" :key="index" :type="0">
				<article-list-item :isAdmin="isAdmin" :inUserSpace="page == 'user-space'" ref="articleListItem" :item="item" @onDeleteSuccess="onDeleteSuccess"></article-list-item>
			</list-item>
		</template>
		<!-- 用户列表 -->
		<template v-else-if="type == 'user'">
			<list-item v-for="(item,index) in userList" :key="index" :type="5">
				<user-list-item :item="item"></user-list-item>
			</list-item>
		</template>
		<!-- 话题列表 -->
		<template v-else-if="type == 'topic'">
			<list-item style="padding-left: 34rpx;" v-for="(item,index) in topicList" :key="index" :type="6">
				<topic-list-item :item="item"></topic-list-item>
			</list-item>
		</template>
		<!-- 评论列表 -->
		<template v-else-if="type == 'comment'">
			<list-item v-for="(item,index) in commentList" :key="index" :type="7">
				<comment-list-item :isAdmin="isAdmin" :item="item" @onDeleteSuccess="refreshData(null)"></comment-list-item>
			</list-item>
		</template>
		<list-item :type="4" v-if="!isFirstLoad && count > 0">
			<loading-more :loading="loading" :isEnded="isEnded"></loading-more>
		</list-item>
		
	</list-view>
</template>

<script>
	import type { Result,ListItem,ListResult,updateArticleChangeEvent,updateSupportEvent,Topic,TopicResult,UserItem,UserItemResult,CommentItem,CommentItemResult } from "@/common/type.uts"
	import { getURL } from "@/common/request.uts"
	import { getToken } from "@/store/user.uts"

	export default {
		emits:["onDeleteSuccess"],
		props: {
			type: {
				type: String,
				default: ''
			},
			preload: {
				type: Boolean,
				default: false
			},
			id: {
				type: String,
				default: ''
			},
			category_id:{
				type:Number,
				default:0
			},
			page:{
				type: String,
				default: 'index'
			},
			keyword:{
				type: String,
				default: ''
			},
			user_id:{
				type:Number,
				default:0
			},
			isAdmin:{
				type:Boolean,
				default:false
			}
		},
		data() {
			return {
				loading: false,
				dataList: [] as ListItem[],
				topicList: [] as Topic[],
				userList: [] as UserItem[],
				commentList: [] as CommentItem[],
				isEnded: false,
				loadingError: '',
				currentPage: 1,
				isFirstLoad:true
			}
		},
		computed: {
			// 列表长度
			count():number{
				let count = this.dataList.length
				switch (this.type){
					case "topic":
					count = this.topicList.length
						break;
					case "user":
					count = this.userList.length
						break;
					case "comment":
					count = this.commentList.length
						break;
				}
				return count
			},
		},
		created() {
			if (this.preload) {
				this.loadData(null)
			}
			// 监听帖子变化
			uni.$on("onUpdateArticleChange",this.onUpdateArticleChange)
		},
		// 组件销毁
		destroyed() {
			uni.$off("onUpdateArticleChange",this.onUpdateArticleChange)
		},
		methods: {
			onDeleteSuccess(){
				this.refreshData(null)
				this.$emit("onDeleteSuccess")
			},
			// 打开发帖页面
			openAddPost(){
				uni.navigateTo({
					url: '/pages/add-post/add-post',
				});
			},
			// 监听帖子变化
			onUpdateArticleChange(e:updateArticleChangeEvent){
				const aRefs = this.$refs["articleListItem"] as ComponentPublicInstance[]
				if(e.key == "updateFollow"){
					this.dataList.forEach((o:ListItem,i:number)=>{
						if(o.user_id == e.id){
							aRefs[i].$callMethod("updateFollow",e.value == "true" ? true : false)
						}
					})
					return;
				} 
				
				
				let index = this.dataList.findIndex((o:ListItem,_:number):boolean => o.id == e.id)
				if(index == -1){
					return
				}
				let ItemRef = aRefs[index]
				switch (e.key){
					case "updateSupport":
					ItemRef.$callMethod("updateSupport",JSON.parse<updateSupportEvent>(e.value))
						break;
					case "updateReadCount":
					ItemRef.$callMethod("updateReadCount",parseInt(e.value))
						break;
					case "updateCommentCount":
					ItemRef.$callMethod("updateCommentCount",parseInt(e.value))
						break;
				}
			},
			refreshData(loadComplete : (() => void) | null) {
				this.dataList.length = 0
				this.currentPage = 1
				this.isFirstLoad = true
				this.isEnded = false
				this.loading = false
				this.loadData(loadComplete)
			},
			loadData(loadComplete : (() => void) | null) {
				if (this.loading || this.isEnded) {
					return
				}
				this.loading = true
				
				switch (this.page){
					case "index":
					this.loadArticleList(loadComplete)
						break;
					case "search":
					if(this.type == "article"){
						this.loadArticleList(loadComplete)
					} else if(this.type == "topic"){
						this.loadSearchTopicList(loadComplete)
					} else if(this.type == "user"){
						this.loadSearchUserList(loadComplete)
					}
						break;
					case "user-space":
					if(this.type == "article"){
						this.loadArticleList(loadComplete)
					} else if(this.type == "comment"){
						this.loadCommentListByUserId(loadComplete)
					}
						break;
				}
				
			},
			// 获取用户评论列表
			loadCommentListByUserId(loadComplete : (() => void) | null){
				uni.request<Result<CommentItemResult>>({
					url: getURL(`/user/${this.user_id}/comment/${Math.floor(this.currentPage)}`),
					header:{
						token:getToken()
					},
					success: (res) => {
						let r = res.data
						if(r == null) return
						if(res.statusCode !=200){
							uni.showToast({
								title: r.msg,
								icon: 'none'
							});
							return
						}
						
						const resData = r.data as CommentItemResult | null
						if(resData == null) return
						
						// 是否还有数据
						this.isEnded = resData.last_page <= resData.current_page
						if(this.currentPage == 1){
							this.commentList = resData.data
						} else {
							this.commentList.push(...resData.data)
						}
						
						// 页码+1
						this.currentPage = this.isEnded ? resData.current_page : Math.floor(resData.current_page + 1)
					},
					fail: (err) => {
						uni.showToast({
							title: err.errMsg,
							icon: 'none'
						});
					},
					complete: () => {
						this.loading = false
						this.isFirstLoad = false
						if (loadComplete != null) {
							loadComplete()
						}
					}
				})
			},
			// 搜索话题列表
			loadSearchTopicList(loadComplete : (() => void) | null){
				uni.request<Result<TopicResult>>({
					url: getURL(`/search/topic/${Math.floor(this.currentPage)}?keyword=${this.keyword}`),
					success: (res) => {
						let r = res.data
						if(r == null) return
						if(res.statusCode !=200){
							uni.showToast({
								title: r.msg,
								icon: 'none'
							});
							return
						}
						
						const resData = r.data as TopicResult | null
						if(resData == null) return
						
						// 是否还有数据
						this.isEnded = resData.last_page <= resData.current_page
						if(this.currentPage == 1){
							this.topicList = resData.data
						} else {
							this.topicList.push(...resData.data)
						}
						
						// 页码+1
						this.currentPage = this.isEnded ? resData.current_page : Math.floor(resData.current_page + 1)
					},
					fail: (err) => {
						uni.showToast({
							title: err.errMsg,
							icon: 'none'
						});
					},
					complete: () => {
						this.loading = false
						this.isFirstLoad = false
						if (loadComplete != null) {
							loadComplete()
						}
					}
				})
			},
			// 搜索用户列表
			loadSearchUserList(loadComplete : (() => void) | null){
				uni.request<Result<UserItemResult>>({
					url: getURL(`/search/user/${Math.floor(this.currentPage)}?keyword=${this.keyword}`),
					header:{
						token:getToken()
					},
					success: (res) => {
						let r = res.data
						if(r == null) return
						if(res.statusCode !=200){
							uni.showToast({
								title: r.msg,
								icon: 'none'
							});
							return
						}
						
						const resData = r.data as UserItemResult | null
						if(resData == null) return
						
						// 是否还有数据
						this.isEnded = resData.last_page <= resData.current_page
						if(this.currentPage == 1){
							this.userList = resData.data
						} else {
							this.userList.push(...resData.data)
						}
						
						// 页码+1
						this.currentPage = this.isEnded ? resData.current_page : Math.floor(resData.current_page + 1)
					},
					fail: (err) => {
						uni.showToast({
							title: err.errMsg,
							icon: 'none'
						});
					},
					complete: () => {
						this.loading = false
						this.isFirstLoad = false
						if (loadComplete != null) {
							loadComplete()
						}
					}
				})
			},
			// 获取帖子列表
			loadArticleList(loadComplete : (() => void) | null){
				const p = Math.floor(this.currentPage)
				// 首页
				let url =  `/category/${this.category_id}/article/${p}`
				// 搜索页
				if(this.page == "search"){
					url = `/search/article/${p}?keyword=${this.keyword}`
				} else if(this.page == "user-space"){
					url = `/user/${this.user_id}/article/${p}`
				}
				
				uni.request<Result<ListResult>>({
					url: getURL(url),
					header:{
						token:getToken()
					},
					success: (res) => {
						let r = res.data
						if(r == null) return
						if(res.statusCode !=200){
							uni.showToast({
								title: r.msg,
								icon: 'none'
							});
							return
						}
						
						const resData = r.data as ListResult | null
						if(resData == null) return
						
						// 是否还有数据
						this.isEnded = resData.last_page <= resData.current_page
						if(this.currentPage == 1){
							this.dataList = resData.data
						} else {
							this.dataList.push(...resData.data)
						}
						
						// 页码+1
						this.currentPage = this.isEnded ? resData.current_page : Math.floor(resData.current_page + 1)
					},
					fail: (err) => {
						uni.showToast({
							title: err.errMsg,
							icon: 'none'
						});
					},
					complete: () => {
						this.loading = false
						this.isFirstLoad = false
						if (loadComplete != null) {
							loadComplete()
						}
					}
				})
			}
		}
	}
</script>

<style>
	.list {
		flex: 1;
		background-color: #ffffff;
	}
</style>