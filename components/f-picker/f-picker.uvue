<template>
	<view v-if="show" class="popup-mask" @click.stop="close"></view>
	<view class="popup" :class="show ? 'popup-show' : ''">
		<view class="popup-header">
			<text class="iconfont popup-action" style="font-size: 22px;" @click="close">×</text>
			<text class="popup-title">{{ t }}</text>
			<text class="popup-action" style="color: #949494;" @click="confirm">完成</text>
		</view>
		<picker-view v-if="mode == 'selector'" class="popup-picker" indicator-style="height: 50px;background-color:rgba(0,0,0,0.05);" @change="change">
			<picker-view-column>
				<view class="popup-picker-item"  v-for="(item,index) in range" :key="index">
					<text class="popup-picker-text">{{ item }}</text>
				</view>
			</picker-view-column>
		</picker-view>
		
		<picker-view v-else-if="mode == 'date'" class="popup-picker" indicator-style="height: 50px;background-color:rgba(0,0,0,0.05);" :value="value" @change="change">
		    <picker-view-column>
		        <view class="popup-picker-item" v-for="(item,index) in years" :key="index"><text class="popup-picker-text">{{item}}年</text></view>
		    </picker-view-column>
		    <picker-view-column>
		        <view class="popup-picker-item" v-for="(item,index) in months" :key="index"><text class="popup-picker-text">{{item}}月</text>
		        </view>
		    </picker-view-column>
		    <picker-view-column>
		        <view class="popup-picker-item" v-for="(item,index) in days" :key="index"><text class="popup-picker-text">{{item}}日</text></view>
		    </picker-view-column>
		</picker-view>
		
	</view>
	<view @click.stop="open">
		<slot></slot>
	</view>
</template>

<script>
	import { PropType } from 'vue'
	import { datepickerChangeEvent } from "./type"
	export default {
		name:"f-picker",
		emits:["confirm"],
		props: {
			title:{
				type:String,
				default:""
			},
			mode:{
				type:String,
				default:"selector"
			},
			range:{
				type:Array as PropType<string[]>,
				default() : string[] {
					return [] as string[]
				}
			}
		},
		data() {
			return {
				t:"选择",
				value:[0] as number[],
				show:false,
				
				years: [] as number[],
				year: 0 as number,
				months: [] as number[],
				month: 0 as number,
				days: [] as number[],
				day: 0 as number,
			};
		},
		created() {
			if(this.title != ""){
				this.t = this.title
			} else {
				switch (this.mode){
					case "selector":
					this.t = ""
						break;
					case "date":
					this.t = "选择日期"
						break;
				}
			}
			this.init()
		},
		methods: {
			// 初始化
			init(){
				if(this.mode == "date"){
					const date = new Date()
					const _years : number[] = []
					const _year = date.getFullYear()
					const _months : number[] = []
					const _month : number = date.getMonth() + 1
					const _days : number[] = []
					const _day = date.getDate()
					for (let i = 1949; i <= _year; i++) {
					    _years.push(i)
					}
					for (let i = 1; i <= 12; i++) {
					    _months.push(i)
					}
					for (let i = 1; i <= 31; i++) {
					    _days.push(i)
					}
					
					this.years = _years
					this.year = _year
					this.months = _months
					this.month = _month
					this.days = _days
					this.day = _day
					this.value = [_year - 2000, _month - 1, _day - 1] as number[]
				}
			},
			open(){
				this.show = true
			},
			close() {
				this.show = false
			},
			change(e:UniPickerViewChangeEvent){
				const val = e.detail.value
				this.value = val
				if(this.mode == "date"){
					this.year = this.years[val[0]]
					this.month = this.months[val[1]]
					this.day = this.days[val[2]]
				}
			},
			confirm(){
				switch (this.mode){
					case "selector":
					this.$emit("confirm",this.value[0] as number)
						break;
					case "date":
					let pickObj = {
						year:this.year,
						month:this.month,
						day:this.day,
						label:`${this.year}-${this._getValue(this.month)}-${this._getValue(this.day)}`
					} as datepickerChangeEvent;
					this.$emit("confirm", pickObj.label);
						break;
				}
				this.close()
			},
			_getValue(v:number):string{
				if(v >= 10){
					return v.toString()
				}
				return `0${v}`
			}
		},
	}
</script>

<style>
.popup-mask {
	position: fixed;
	left: 0;
	top: 0;
	right:0;
	bottom: 0;
	background-color: rgba(0, 0, 0, 0.3);
	z-index: 99;
}
.popup {
	position: fixed;
	bottom: 0;
	right: 0;
	left: 0;
	background-color: #ffffff;
	z-index: 100;
	border-top-left-radius: 15px;
	border-top-right-radius: 15px;
	transform: translateY(1000px);
	opacity: 0;
	transition-property: transform,opacity;
	transition-duration: 400ms;
}
.popup-show {
	opacity: 1;
	transform: translateY(0);
}
.popup-header {
	height: 112rpx;
	flex-direction: row;
	align-items: center;
	border-bottom: 1px solid #ececec;
}
.popup-action {
	font-size: 16px;
	width: 100rpx;
	height: 112rpx;
	text-align: center;
	line-height: 112rpx;
}
.popup-title {
	flex: 1;
	text-align: center;
	font-weight: bold;
	font-size: 16px;
}

.popup-picker {
	height: 400rpx;
}
.popup-picker-item {
	height: 50px;
}
.popup-picker-text {
	text-align: center;
	line-height: 50px;
}

/* .picker-view {
	width: 100%;
	height: 320px;
	margin-top: 10px;
} */
</style>