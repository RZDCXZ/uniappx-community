
	import type { TabsSwiperItem } from "./type.uts"
	import type { PropType } from "vue"

	/**
	 * 根据权重在两个值之间执行线性插值.
	 * @constructor
	 * @param {number} value1 - 第一个值，该值应为下限.
	 * @param {number} value2 - 第二个值，该值应为上限.
	 * @param {number} amount - 应介于 0 和 1 之间，指示内插的权重.
	 * @returns {number} 内插值
	 */
	function lerpNumber(value1 : number, value2 : number, amount : number) : number {
		return (value1 + (value2 - value1) * amount)
	}

	export default {
		emits:["loadData","change"],
		props: {
			tabs: {
				type: Array as PropType<TabsSwiperItem[]>,
				required:true 
			},
			showSearchIcon:{
				type:Boolean,
				default:false
			},
			defaultTabIndex:{
				type:Number,
				default:0
			}
		},
		data() {
			return {
				swiperIndex: 0,
				tabScrollView: null as null | UniElement,
				animationFinishIndex: 0,
				swiperWidth: 0
			}
		},
		created() {
			this.swiperIndex = this.defaultTabIndex
		},
		mounted() {
			this.$nextTick(()=>{
				this.tabScrollView = this.$refs['tabScroll'] as UniElement
				this.swiperWidth = (this.$refs["swiper"] as UniElement).getBoundingClientRect().width
				// this.updateTabIndicator(this.swiperIndex, this.swiperIndex, 1)
			})
		},
		methods: {
			openSearch(){
				uni.navigateTo({
					url: '/pages/search/search',
				});
			},
			onTabClick(index : number) {
				this.setSwiperIndex(index, false)
			},
			onSwiperTransition(e : SwiperTransitionEvent) {
				const offset_x = e.detail.dx

				// 计算当前索引并重置差异
				const current_offset_x = offset_x % this.swiperWidth
				const current_offset_i = offset_x / this.swiperWidth
				const current_index = this.animationFinishIndex + parseInt(current_offset_i + '')

				// 计算目标索引及边界检查
				let move_to_index = current_index
				if (current_offset_x > 0 && move_to_index < this.tabs.length - 1) {
					move_to_index += 1
				} else if (current_offset_x < 0 && move_to_index > 0) {
					move_to_index -= 1
				}

				// 计算偏移百分比
				const percentage = Math.abs(current_offset_x) / this.swiperWidth

				// 通知更新指示线
				if (current_index != move_to_index) {
					this.updateTabIndicator(current_index, move_to_index, percentage)
				}
				
				// 首次可见时初始化数据
				this.initSwiperItemData(move_to_index)
			},
			onSwiperAnimationfinish(e : SwiperAnimationFinishEvent) {
				this.setSwiperIndex(e.detail.current, true)
				this.animationFinishIndex = e.detail.current
			},
			setSwiperIndex(index : number, updateIndicator : boolean) {
				if (this.swiperIndex == index) {
					return
				}

				this.swiperIndex = index
				this.$emit("change",this.swiperIndex)
				
				this.initSwiperItemData(index)

				if (updateIndicator) {
					this.updateTabIndicator(index, index, 1)
				}
			},
			updateTabIndicator(current_index : number, move_to_index : number, percentage : number) {
				if (percentage == 0) {
					return
				}

				// 缩放范围
				const min_ratio = 1
				const max_ratio = 1.3

				const tabs = this.$refs['swipertab'] as UniElement[]
				const current_node = tabs[current_index]
				const move_to_node = tabs[move_to_index]

				// 当前
				const current_scale = lerpNumber(min_ratio, max_ratio, 1 - percentage)
				current_node.style.setProperty('transform', `scale(${current_scale})`)

				// 目标
				const move_to_scale = lerpNumber(min_ratio, max_ratio, percentage)
				move_to_node.style.setProperty('transform', `scale(${move_to_scale})`)

				// 滚动到水平中心位置
				const target_x = lerpNumber(current_node.offsetLeft, move_to_node.offsetLeft, percentage)
				const center_x = target_x + move_to_node.offsetWidth / 2 - this.swiperWidth / 2
				this.tabScrollView!.scrollLeft = center_x
			},
			initSwiperItemData(index : number) {
				if (!this.tabs[index].preload) {
					this.tabs[index].preload = true;
					this.$emit("loadData",index as number)
				}
			}
		}
	}


import _easycom_status_bar from '@/components/status-bar/status-bar.uvue'
function GenComponentsTabsSwiperTabsSwiperRender(): any | null {
const _ctx = this
const _cache = this.$.renderCache
const _component_status_bar = resolveEasyComponent("status-bar",_easycom_status_bar)

  return createElementVNode(Fragment, null, [
    renderSlot(_ctx.$slots, "navbar", {}, (): any[] => [
      createVNode(_component_status_bar)
    ]),
    createElementVNode("view", utsMapOf({ class: "flex-1" }), [
      createElementVNode("view", utsMapOf({ class: "flex" }), [
        createElementVNode("scroll-view", utsMapOf({
          ref: "tabScroll",
          class: "swiper-tabs",
          direction: "horizontal",
          "show-scrollbar": false,
          style: normalizeStyle(_ctx.showSearchIcon ? 'width: 646rpx;' : 'width: 750rpx;')
        }), [
          createElementVNode("view", utsMapOf({ class: "swiper-tabs-item" }), [
            createElementVNode(Fragment, null, RenderHelpers.renderList(_ctx.tabs, (item, index, _, _): VNode => {
              return createElementVNode("text", utsMapOf({
                ref_for: true,
                ref: "swipertab",
                class: normalizeClass(["swiper-tabs-item-text", _ctx.swiperIndex==index ? 'swiper-tabs-item-active' : '']),
                key: index,
                onClick: () => {_ctx.onTabClick(index)}
              }), toDisplayString(item.name), 11 /* TEXT, CLASS, PROPS */, ["onClick"])
            }), 128 /* KEYED_FRAGMENT */)
          ])
        ], 4 /* STYLE */),
        isTrue(_ctx.showSearchIcon)
          ? createElementVNode("view", utsMapOf({
              key: 0,
              class: "search",
              onClick: _ctx.openSearch
            }), [
              createElementVNode("text", utsMapOf({ class: "iconfont" }), toDisplayString('\ue606'))
            ], 8 /* PROPS */, ["onClick"])
          : createCommentVNode("v-if", true)
      ]),
      createElementVNode("swiper", utsMapOf({
        ref: "swiper",
        class: "flex-1",
        current: _ctx.swiperIndex,
        onTransition: _ctx.onSwiperTransition,
        onAnimationfinish: _ctx.onSwiperAnimationfinish
      }), [
        renderSlot(_ctx.$slots, "default")
      ], 40 /* PROPS, NEED_HYDRATION */, ["current", "onTransition", "onAnimationfinish"])
    ])
  ], 64 /* STABLE_FRAGMENT */)
}
const GenComponentsTabsSwiperTabsSwiperStyles = [utsMapOf([["flex", padStyleMapOf(utsMapOf([["flexDirection", "row"]]))], ["flex-1", padStyleMapOf(utsMapOf([["flex", 1]]))], ["search", padStyleMapOf(utsMapOf([["height", "103rpx"], ["width", "103rpx"], ["alignItems", "center"], ["justifyContent", "center"]]))], ["swiper-tabs", padStyleMapOf(utsMapOf([["height", "103rpx"]]))], ["swiper-tabs-item", padStyleMapOf(utsMapOf([["flexDirection", "row"], ["alignSelf", "flex-start"], ["height", "103rpx"], ["alignItems", "center"]]))], ["swiper-tabs-item-text", padStyleMapOf(utsMapOf([["color", "#555555"], ["fontSize", 16], ["fontWeight", "bold"], ["marginTop", 0], ["marginRight", "20rpx"], ["marginBottom", 0], ["marginLeft", "20rpx"], ["whiteSpace", "nowrap"]]))], ["swiper-tabs-item-active", padStyleMapOf(utsMapOf([["color", "#F06487"]]))]])]
