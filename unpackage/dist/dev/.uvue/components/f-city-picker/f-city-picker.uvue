
	import { PropType,ComponentPublicInstance } from "vue"
	import { cityItem, citypickerChangeEvent } from "./type"
	import provinceData from './city-data/province';
	import cityData from './city-data/city';
	import areaData from './city-data/area';
	export default {
		emits: ["confirm"],
		data() {
			return {
				pickerValue: [0, 0, 0] as number[],
				provinceDataList: provinceData as cityItem[],
				cityDataList: cityData[0] as cityItem[],
				areaDataList: areaData[0][0] as cityItem[],
				citypickerRef: null as ComponentPublicInstance | null,
				show:false
			};
		},
		created() {
			this.init()
		},
		// props: {
		// 	/* 默认值 */
		// 	pickerValueDefault: {
		// 		type: Array as PropType<number[]>,
		// 		default() : number[] {
		// 			return [0, 0, 0] as number[]
		// 		}
		// 	},
		// },
		watch: {
			pickerValueDefault() {
				this.init();
			}
		},
		mounted() {
			// this.citypickerRef = this.$refs["citypicker"] as ComponentPublicInstance
		},
		methods: {
			open() {
				this.show = true
			},
			close() {
				this.show = false
			},
			init() {
				//this.handPickValueDefault(); // 对 pickerValueDefault 做兼容处理

				let pickerValueDefault = [0, 0, 0] as number[]
				// if (this.pickerValueDefault != null) {
				// 	pickerValueDefault = this.pickerValueDefault as number[]
				// }

				this.cityDataList = cityData[pickerValueDefault[0]];
				this.areaDataList = areaData[pickerValueDefault[0]][pickerValueDefault[1]];
				this.pickerValue = pickerValueDefault;
			},
			// handPickValueDefault() {
			// 	const pickerValueDefault = this.pickerValueDefault as number[]

			// 	let provinceIndex = 0
			// 	let cityIndex = 0
			// 	let areaIndex = 0
			// 	if(pickerValueDefault.length != 3){
			// 		return
			// 	}
			// 	provinceIndex = pickerValueDefault[0] as number
			// 	cityIndex = pickerValueDefault[1] as number
			// 	areaIndex = pickerValueDefault[2] as number
			// 	if (provinceIndex !== 0 || cityIndex !== 0 || areaIndex !== 0) {
			// 		if (provinceIndex > provinceData.length - 1) {
			// 			this.pickerValueDefault[0] as number = provinceIndex as number = parseInt(provinceData.length - 1);
			// 		}
			// 		if (cityIndex > cityData[provinceIndex].length - 1) {
			// 			this.pickerValueDefault[1] as number = cityIndex as number = parseInt(cityData[provinceIndex].length - 1);
			// 		}
			// 		if (areaIndex > areaData[provinceIndex][cityIndex].length - 1) {
			// 			this.pickerValueDefault[2] as number = parseInt(areaData[provinceIndex][cityIndex].length - 1);
			// 		}
			// 	}
			// },
			pickerChange(e : PickerViewChangeEvent) {
				let changePickerValue = e.detail.value;
				if (this.pickerValue[0] !== changePickerValue[0]) {
					// 第一级发生滚动
					this.cityDataList = cityData[changePickerValue[0]];
					this.areaDataList = areaData[changePickerValue[0]][0];
					changePickerValue[1] = 0;
					changePickerValue[2] = 0;
				} else if (this.pickerValue[1] !== changePickerValue[1]) {
					// 第二级滚动
					this.areaDataList =
						areaData[changePickerValue[0]][changePickerValue[1]];
					changePickerValue[2] = 0;
				}
				this.pickerValue = changePickerValue;
				// this._$emit('onChange');
			},
			confirm() {
				let pickObj = {
					label: this._getLabel(),
					value: this.pickerValue,
					cityCode: this._getCityCode()
				} as citypickerChangeEvent;
				this.$emit("confirm", pickObj);
				this.close()
			},
			// _$emit(emitName:string) {
			// 	let pickObj = {
			// 		label: this._getLabel(),
			// 		value: this.pickerValue,
			// 		cityCode: this._getCityCode()
			// 	} as citypickerChangeEvent;
			// 	this.$emit(emitName, pickObj);
			// },
			_getLabel() : string {
				let pcikerLabel =
					this.provinceDataList[this.pickerValue[0]].label +
					'-' +
					this.cityDataList[this.pickerValue[1]].label +
					'-' +
					this.areaDataList[this.pickerValue[2]].label;
				return pcikerLabel;
			},
			_getCityCode() : string {
				return this.areaDataList[this.pickerValue[2]].value;
			}
		}
	};


function GenComponentsFCityPickerFCityPickerRender(): any | null {
const _ctx = this
const _cache = this.$.renderCache
const _component_picker_view_column = resolveComponent("picker-view-column")
const _component_picker_view = resolveComponent("picker-view")

  return createElementVNode(Fragment, null, [
    isTrue(_ctx.show)
      ? createElementVNode("view", utsMapOf({
          key: 0,
          class: "popup-mask",
          onClick: _ctx.close
        }), null, 8 /* PROPS */, ["onClick"])
      : createCommentVNode("v-if", true),
    createElementVNode("view", utsMapOf({
      class: normalizeClass(["popup", _ctx.show ? 'popup-show' : ''])
    }), [
      createElementVNode("view", utsMapOf({ class: "popup-header" }), [
        createElementVNode("text", utsMapOf({
          class: "iconfont popup-action",
          style: normalizeStyle(utsMapOf({"font-size":"22px"})),
          onClick: _ctx.close
        }), "×", 12 /* STYLE, PROPS */, ["onClick"]),
        createElementVNode("text", utsMapOf({ class: "popup-title" }), "选择地址"),
        createElementVNode("text", utsMapOf({
          class: "popup-action",
          style: normalizeStyle(utsMapOf({"color":"#949494"})),
          onClick: _ctx.confirm
        }), "完成", 12 /* STYLE, PROPS */, ["onClick"])
      ]),
      createVNode(_component_picker_view, utsMapOf({
        "indicator-style": "height: 40px;",
        class: "picker-view",
        value: _ctx.pickerValue,
        onChange: _ctx.pickerChange
      }), utsMapOf({
        default: withSlotCtx((): any[] => [
          createVNode(_component_picker_view_column, null, utsMapOf({
            default: withSlotCtx((): any[] => [
              createElementVNode(Fragment, null, RenderHelpers.renderList(_ctx.provinceDataList, (item, index, _, _): VNode => {
                return createElementVNode("view", utsMapOf({ key: index }), [
                  createElementVNode("text", utsMapOf({ class: "picker-item" }), toDisplayString(item.label), 1 /* TEXT */)
                ])
              }), 128 /* KEYED_FRAGMENT */)
            ]),
            _: 1 /* STABLE */
          })),
          createVNode(_component_picker_view_column, null, utsMapOf({
            default: withSlotCtx((): any[] => [
              createElementVNode(Fragment, null, RenderHelpers.renderList(_ctx.cityDataList, (item, index, _, _): VNode => {
                return createElementVNode("view", utsMapOf({ key: index }), [
                  createElementVNode("text", utsMapOf({ class: "picker-item" }), toDisplayString(item.label), 1 /* TEXT */)
                ])
              }), 128 /* KEYED_FRAGMENT */)
            ]),
            _: 1 /* STABLE */
          })),
          createVNode(_component_picker_view_column, null, utsMapOf({
            default: withSlotCtx((): any[] => [
              createElementVNode(Fragment, null, RenderHelpers.renderList(_ctx.areaDataList, (item, index, _, _): VNode => {
                return createElementVNode("view", utsMapOf({ key: index }), [
                  createElementVNode("text", utsMapOf({ class: "picker-item" }), toDisplayString(item.label), 1 /* TEXT */)
                ])
              }), 128 /* KEYED_FRAGMENT */)
            ]),
            _: 1 /* STABLE */
          }))
        ]),
        _: 1 /* STABLE */
      }), 8 /* PROPS */, ["value", "onChange"])
    ], 2 /* CLASS */),
    createElementVNode("view", utsMapOf({
      onClick: withModifiers(_ctx.open, ["stop"])
    }), [
      renderSlot(_ctx.$slots, "default")
    ], 8 /* PROPS */, ["onClick"])
  ], 64 /* STABLE_FRAGMENT */)
}
const GenComponentsFCityPickerFCityPickerStyles = [utsMapOf([["popup-mask", padStyleMapOf(utsMapOf([["position", "fixed"], ["left", 0], ["top", 0], ["right", 0], ["bottom", 0], ["backgroundColor", "rgba(0,0,0,0.3)"], ["zIndex", 99]]))], ["popup", padStyleMapOf(utsMapOf([["position", "fixed"], ["bottom", 0], ["right", 0], ["left", 0], ["backgroundColor", "#ffffff"], ["zIndex", 100], ["borderTopLeftRadius", 15], ["borderTopRightRadius", 15], ["transform", "translateY(1000px)"], ["opacity", 0], ["transitionProperty", "transform,opacity"], ["transitionDuration", "400ms"]]))], ["popup-show", padStyleMapOf(utsMapOf([["opacity", 1], ["transform", "translateY(0)"]]))], ["popup-header", padStyleMapOf(utsMapOf([["height", "112rpx"], ["flexDirection", "row"], ["alignItems", "center"], ["borderBottomWidth", 1], ["borderBottomStyle", "solid"], ["borderBottomColor", "#ececec"]]))], ["popup-action", padStyleMapOf(utsMapOf([["fontSize", 16], ["width", "100rpx"], ["height", "112rpx"], ["textAlign", "center"], ["lineHeight", "112rpx"]]))], ["popup-title", padStyleMapOf(utsMapOf([["flex", 1], ["textAlign", "center"], ["fontWeight", "bold"], ["fontSize", 16]]))], ["picker-view", padStyleMapOf(utsMapOf([["width", "750rpx"], ["height", "500rpx"]]))], ["picker-item", padStyleMapOf(utsMapOf([["textAlign", "center"], ["lineHeight", "40px"], ["textOverflow", "ellipsis"], ["fontSize", 16]]))], ["@TRANSITION", utsMapOf([["popup", utsMapOf([["property", "transform,opacity"], ["duration", "400ms"]])]])]])]
