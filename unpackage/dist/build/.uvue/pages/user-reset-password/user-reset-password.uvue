
	import type { defaultResult,UserDetail,Result } from "@/common/type.uts"
	import { getURL } from "@/common/request.uts"
	import { getToken, userState,updatePassword } from '@/store/user.uts'
	export default {
		data() {
			return {
				code:"",
				password:"",
				time:0,
				type:"changepwd",
				phone:""
			}
		},
		onLoad(options:OnLoadOptions) {
			if(options.has("phone")){
				this.phone = options.get("phone") as string
			} else {
				this.phone = userState.phone as string
			}
			if(options.has("type")){
				this.type = options.get("type") as string
			}
		},
		computed: {
			title():string{
				if(this.type == "forget"){
					return "重置密码"
				}
				return "修改密码"
			},
			disabled(): boolean {
				return this.password.trim().length < 5
			},
			sendSmsDisabled(): boolean {
				return this.time > 0
			},
		},
		methods: {
			// 发送验证码
			sendSmsCode(){
				if(this.sendSmsDisabled) return
				uni.showLoading({
					title: '发送中...',
					mask: true
				});
				
				let data = {} as UTSJSONObject
				let url = "sendcode2"
				if(this.type == "forget"){
					data.set("phone",this.phone)
					url = "sendcode"
				}
				uni.request<defaultResult>({
					url: getURL(`/user/${url}`),
					method:"POST",
					data,
					header:{
						token:getToken()
					},
					success: res => {
						let r = res.data
						if(r == null) return
						if(res.statusCode !=200){
							uni.showToast({
								title: r.msg,
								icon: 'none'
							});
							return
						}
						if(r.msg == "发送成功"){
							uni.showToast({
								title: '发送成功'
							});
						} 
						// 调试模式
						else {
							uni.showModal({
								content: r.msg,
								showCancel: false,
							});
						}
						// 开启倒计时
						this.handleSendSmsCode()
					},
					fail: (err) => {
						uni.showToast({
							title: err.errMsg,
							icon: 'none'
						});
					},
					complete: () => {
						uni.hideLoading()
					}
				});
			},
			// 开启倒计时
			handleSendSmsCode(){
				this.time = 60
				let interval:number = 0
				interval = setInterval(()=>{
					this.time--
					if(this.time <= 0){
						clearInterval(interval)
					}
				},1000)
			},
			// 提交
			submit(){
				if(this.disabled) return
				uni.showLoading({
					title: '修改中...',
					mask: true
				});
				
				let data = {
					code:this.code,
					password:this.password
				} as UTSJSONObject
				
				if(this.type == "forget"){
					data.set("phone",this.phone)
				}
				
				uni.request<defaultResult>({
					url: getURL(`/user/${this.type}`),
					method:"POST",
					header:{
						token:getToken()
					},
					data,
					success: res => {
						let r = res.data
						if(r == null) return
						if(res.statusCode !=200){
							uni.showToast({
								title: r.msg,
								icon: 'none'
							});
							return
						}
						
						let delta = 1
						
						if(this.type == "changepwd"){
							// 更新本地密码状态
							updatePassword()
						} else {
							delta = 2
							uni.showToast({
								title: r.msg,
								icon: 'none'
							});
						}
						
						setTimeout(()=>{
							uni.navigateBack({
								delta
							});
						},300)
					},
					fail: (err) => {
						uni.showToast({
							title: err.errMsg,
							icon: 'none'
						});
					},
					complete: () => {
						uni.hideLoading()
					}
				});
			}
		}
	}


import _easycom_navbar from '@/components/navbar/navbar.uvue'
import _easycom_login_input from '@/components/login-input/login-input.uvue'
import _easycom_main_btn from '@/components/main-btn/main-btn.uvue'
function GenPagesUserResetPasswordUserResetPasswordRender(): any | null {
const _ctx = this
const _cache = this.$.renderCache
const _component_navbar = resolveEasyComponent("navbar",_easycom_navbar)
const _component_login_input = resolveEasyComponent("login-input",_easycom_login_input)
const _component_main_btn = resolveEasyComponent("main-btn",_easycom_main_btn)

  return createElementVNode(Fragment, null, [
    createVNode(_component_navbar),
    createElementVNode("view", utsMapOf({ class: "login-page" }), [
      createElementVNode("text", utsMapOf({ class: "login-title" }), toDisplayString(_ctx.title), 1),
      _ctx.phone != '' 
        ? createElementVNode("text", utsMapOf({
            key: 0,
            class: "input-tip"
          }), "通过手机号 " + toDisplayString(_ctx.phone) + " 进行验证", 1)
        : createCommentVNode("v-if", true),
      createVNode(_component_login_input, utsMapOf({
        style: normalizeStyle(utsMapOf({"margin-top":"10rpx"})),
        modelValue: _ctx.code,
        "onUpdate:modelValue": $event => {(_ctx.code) = $event},
        placeholder: "请输入验证码",
        maxlength: 6,
        btn: _ctx.time > 0 ? `${_ctx.time}s` : '发送验证码',
        onClick: _ctx.sendSmsCode
      }), null, 8, ["style", "modelValue", "onUpdate:modelValue", "btn", "onClick"]),
      createVNode(_component_login_input, utsMapOf({
        password: true,
        type: "safe-password",
        style: normalizeStyle(utsMapOf({"margin-top":"0"})),
        modelValue: _ctx.password,
        "onUpdate:modelValue": $event => {(_ctx.password) = $event},
        placeholder: "请输入密码",
        "confirm-type": "send",
        onConfirm: _ctx.submit
      }), null, 8, ["style", "modelValue", "onUpdate:modelValue", "onConfirm"]),
      createElementVNode("text", utsMapOf({ class: "input-tip" }), "温馨提示：密码为6-20位，至少包含大写/小写字母/数字符号2中组合"),
      createElementVNode("view", utsMapOf({ class: "login-bottom" }), [
        createVNode(_component_main_btn, utsMapOf({
          disabled: _ctx.disabled,
          borderRadius: "0",
          width: "750rpx",
          height: "98rpx",
          fontSize: "18px",
          onClick: () => {_ctx.submit()}
        }), utsMapOf({
          default: withSlotCtx((): any[] => ["完成"]),
          _: 1
        }), 8, ["disabled", "onClick"])
      ])
    ])
  ], 64 /* STABLE_FRAGMENT */)
}
const GenPagesUserResetPasswordUserResetPasswordStyles = []
